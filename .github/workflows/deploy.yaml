name: Deploy Flask + Nginx en DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy-compose:
    runs-on: ubuntu-latest
    steps:
      - name: Clonar repositorio
        uses: actions/checkout@v4

      - name: Instalar `expect`
        run: sudo apt-get update && sudo apt-get install -y expect

      - name: Configurar SSH y conectar al servidor
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_LJRG }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H -t rsa 67.207.84.219 >> ~/.ssh/known_hosts

      - name: Configurar permisos del firewall (UFW)
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 << 'EOF'
            sudo ufw allow 8090/tcp
            sudo ufw reload
            sudo ufw status
          EOF

      - name: Probar conexión SSH con `expect`
        run: |
          expect <<EOF
          spawn ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 "echo Conexión exitosa!"
          expect "Enter passphrase for key"
          send "123123\r"
          expect eof
          EOF

      - name: Sincronizar archivos con el servidor usando `expect`
        run: |
          expect <<EOF
          spawn rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./ root@67.207.84.219:/root/codigo/docker-flask-nginx
          expect "Enter passphrase for key"
          send "123123\r"
          expect eof
          EOF

      - name: Conectar al servidor y desplegar con Docker Compose usando `expect`
        run: |
          expect <<EOF
          spawn ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219
          expect "Enter passphrase for key"
          send "123123\r"
          expect "#"
          send "cd /root/codigo/docker-flask-nginx\r"
          send "docker-compose down\r"
          send "docker-compose up -d --build\r"
          send "exit\r"
          expect eof
          EOF

      - name: Verificar estado de los contenedores usando `expect`
        run: |
          expect <<EOF
          spawn ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 "docker ps --format 'table {{.Names}}\t{{.Status}}'"
          expect "Enter passphrase for key"
          send "123123\r"
          expect eof
          EOF

# # name: Workflow docker compose

# # on: 
# #   push:
# #     branches:
# #       - main

# # jobs:
# #   deploy-compose:
# #     runs-on: ubuntu-latest
# #     steps:
# #       - name: Clonar repositorio
# #         uses: actions/checkout@v4

# #       - name: Instalar `expect`
# #         run: sudo apt-get update && sudo apt-get install -y expect

# #       - name: Configurar SSH y conectar al servidor
# #         run: |
# #           mkdir -p ~/.ssh
# #           echo "${{ secrets.SSH_PRIVATE_KEY_LJRG }}" > ~/.ssh/id_rsa
# #           chmod 600 ~/.ssh/id_rsa
# #           ssh-keyscan -H -t rsa 67.207.84.219 >> ~/.ssh/known_hosts

# #       - name: Probar conexión SSH con `expect`
# #         run: |
# #           expect <<EOF
# #           spawn ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 "echo Conexión exitosa!"
# #           expect "Enter passphrase for key"
# #           send "123123\r"
# #           expect eof
# #           EOF

# #       - name: Sincronizar archivos con el servidor usando `expect`
# #         run: |
# #           expect <<EOF
# #           spawn rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./ root@67.207.84.219:/root/codigo/docker-scale-python-LJRG
# #           expect "Enter passphrase for key"
# #           send "123123\r"
# #           expect eof
# #           EOF

# #       - name: Conectar al servidor y desplegar con Docker Compose usando `expect`
# #         run: |
# #           expect <<EOF
# #           spawn ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219
# #           expect "Enter passphrase for key"
# #           send "123123\r"
# #           expect "#"
# #           send "cd /root/codigo/docker-scale-python-LJRG\r"
# #           send "docker compose down || docker-compose down\r"
# #           send "docker compose pull\r"
# #           send "docker compose up -d --build || docker-compose up -d --build\r"
# #           send "docker system prune -f\r"
# #           send "exit\r"
# #           expect eof
# #           EOF

# #       - name: Verificar estado de los contenedores usando `expect`
# #         run: |
# #           expect <<EOF
# #           spawn ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 "docker ps --format 'table {{.Names}}\t{{.Status}}'"
# #           expect "Enter passphrase for key"
# #           send "123123\r"
# #           expect eof
# #           EOF




# name: Workflow docker compose

# on: 
#   push:
#     branches:
#       - main

# jobs:
#   deploy-compose:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clonar repositorio
#         uses: actions/checkout@v4

#       - name: Instalar sshpass
#         run: sudo apt-get update && sudo apt-get install -y sshpass

#       - name: Configurar SSH y conectar al servidor
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.SSH_PRIVATE_KEY_LJRG }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H -t rsa 67.207.84.219 >> ~/.ssh/known_hosts

#       - name: Validar contenido de ~/.ssh
#         run: |
#           ls -l ~/.ssh
#           cat ~/.ssh/known_hosts

#       - name: Instalar expect
#         run: sudo apt-get update && sudo apt-get install -y expect

#       - name: Conectar al servidor con passphrase usando `expect`
#         run: |
#           expect <<EOF
#           spawn ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 "echo Conexión exitosa!"
#           expect "Enter passphrase for key"
#           send "123123\r"
#           expect eof
#           EOF

#       - name: Probar conexión SSH con `sshpass`
#         run: |
#           sshpass -p "123123" ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 "echo Conexión exitosa!"

#       - name: Sincronizar archivos con el servidor
#         run: |
#           sshpass -p "123123" rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" ./ root@67.207.84.219:/root/codigo/docker-scale-python-LJRG

#       - name: Conectar al servidor y desplegar con Docker Compose
#         run: |
#           sshpass -p "123123" ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 << 'EOF'
#             set -e
#             cd /root/codigo/docker-scale-python-LJRG
#             docker compose down || docker-compose down
#             docker compose pull
#             docker compose up --build --no-deps -d web || docker-compose up --build --no-deps -d web
#             docker system prune -f
#             echo "🚀 Despliegue completado con éxito!"
#           EOF

#       - name: Verificar estado de los contenedores
#         run: sshpass -p "123123" ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 "docker ps --format 'table {{.Names}}\t{{.Status}}'"

#       - name: Notificar en Slack
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#           SLACK_MESSAGE: "🚀 Despliegue exitoso en Digital Ocean!"


# name: Workflow docker compose

# on: 
#   push:
#     branches:
#       - main

# jobs:
#   deploy-compose:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clonar repositorio
#         uses: actions/checkout@v4

#       - name: Instalar sshpass
#         run: sudo apt-get update && sudo apt-get install -y sshpass

#       - name: Configurar SSH y conectar al servidor
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.SSH_PRIVATE_KEY_LJRG }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H -t rsa 67.207.84.219 >> ~/.ssh/known_hosts

#       - name: Validar contenido de mi secret
#         run: |
#           echo "${{ secrets.SSH_PRIVATE_KEY_LJRG }}"
#         env:
#           ACTIONS_STEP_DEBUG: true

#       - name: Verificar contenido de ~/.ssh/id_rsa
#         run: |
#           ls -l ~/.ssh
#           cat ~/.ssh/id_rsa
#           cat ~/.ssh/known_hosts

#       - name: Conectando y desplegando el compose...
#         run: |
#           sshpass -p "123123" ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@67.207.84.219 << 'EOF'
#             set -e  # Terminar el script si algún comando falla
#             mkdir -p /root/codigo/docker-scale-python-LJRG
#             cd /root/codigo/docker-scale-python-LJRG
#             if [ ! -d ".git" ]; then
#               git clone git@github.com:usuario/docker-scale-python-LJRG.git .
#             fi
#             git fetch origin main
#             git reset --hard origin/main
#             docker compose down || docker-compose down
#             docker compose up -d --build || docker-compose up -d --build
#           EOF


# name: Workflow docker compose

# on: 
#   push:
#     branches:
#       - main

# jobs:
#   deploy-compose:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clonar repositorio
#         uses: actions/checkout@v4

#       - name: Configurando y conectando al servidor de DigitalOcean...
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.SSH_PRIVATE_KEY_LJRG }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H -t rsa 67.207.84.219 >> ~/.ssh/known_hosts

#       - name: validar contenido de mi secret
#         run: |
#           echo "${{ secrets.SSH_PRIVATE_KEY_LJRG }}"
#         env:
#           ACTIONS_STEP_DEBUG: true

#       - name: verificando contenido de ~/.ssh/id_rsa
#         run: |
#           ls -l ~/.ssh
#           cat ~/.ssh/id_rsa
#           cat ~/.ssh/known_hosts

#       - name: Conectando y desplegando el compose...
#         run: |
#           ssh -i ~/.ssh/id_rsa root@67.207.84.219 << 'EOF'
#             set -e  # Terminar el script si algún comando falla
#             mkdir -p /root/codigo/docker-scale-python-LJRG
#             cd /root/codigo/docker-scale-python-LJRG
#             if [ ! -d ".git" ]; then
#               git clone git@github.com:usuario/docker-scale-python-LJRG.git .
#             fi
#             git fetch origin main
#             git reset --hard origin/main
#             docker compose down || docker-compose down
#             docker compose up -d --build || docker-compose up -d --build
#           EOF

# name: Workflow docker compose

# on: 
#   push:
#     branches:
#       - main

# jobs:
#   deploy-compose:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Clonar repositorio
#         uses: actions/checkout@v4

#       - name: Configurando y conectando al servidor de digital ocean...
#         run: |
#           mkdir -p ~/.ssh
#           echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#           chmod 600 ~/.ssh/id_rsa
#           ssh-keyscan -H 67.207.84.219 >> ~/.ssh/known_hosts
      
#       - name: Conectando y desplegando el compose...
#         run: |
#           ssh -i  ~/.ssh/id_rsa root@67.207.84.219 << 'EOF'
#             mkdir -p /root/codigo/docker-scale-python-LJRG
#             cd /root/codigo/docker-scale-python-LJRG
#             git pull origin main
#             docker compose down
#             docker compose up -d --build
#           EOF

